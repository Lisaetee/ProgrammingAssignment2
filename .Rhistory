library(datasets)
data(iris)
?iris
print (iris)
lapply(iris, sepal.length [virginica], mean)
mean(iris, sepal.length, mean)
mean(iris, [sepal.length], virginica)
sapply(iris, mean)
sapply(iris, $Sepal.Length, [virginica], mean)
s <-(iris, iris$Sepal.Length)
s <- (iris, iris$Sepal.Length)
s <- split(iris, iris$Sepal.Lenth)
split(virginica)
split(iris$virginica)
X <- split(iris, $species)
x <- split(iris, species)
mean(subset(iris, species = Virginica))
tapply(iris, "species", mean)
split(iris, "species")
sapply(iris, 101:150, (mean))
sapply(iris,$Length, (mean)
sapply(iris, (mean)
sapply(iris, 1, (mean)
sapply(iris$Sepal.Length, [Species], (mean)
sapply(iris$Sepal.Length, [verginica], (mean)
iris3
sapply(mean(iris$Sepal.Length))
split(iris$Species)
x<- split(iris$Species)
virginica <- (iris$Species, [virginia])
virginica <-(iris$Species [virginica])
newdata <-(iris, [101:150]
newdata <-(iris[101:150])
newdata <-(iris[species])
newdata <-(iris[iris$Species = virginica])
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <-(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
skip()
skip()
skip()
sum(flags$orance)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head()
head(flag_colors)
skip()
skip()
sapply(flag_colors, sum)
sapply(flag_colors, mean)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
iris
sapply(mean(iris, species=virginica))
sapply(iris, FUN = mean)
sapply(iris$Species [virinica] FUN=mean)
sapply(iris$Species [virginica] FUN=mean)
subset(iris$species = virginica)
subset(iris$Species)
subset(iris$Species [virginica])
?split
x <- split(iris$Species=virginica)
sapply(iris, [virginica] FUN = mean)
sapply(iris, virginica, FUN = mean)
sapply(iris, 101:150, mean)
sapply(iris, (c(101:150), mean)
sapply(iris, (c(101:150) mean)
sapply(iris, (101:150) mean)
sapply(iris3, FUN = mean)
sapply(iris3, $virginica, FUN = mean)
iris3
sapply(Virginica$SepalL, mean)
lapply(iris3, "Virginica", mean)
list(iris)
list(iris3)
sapply(iris3,,Virginica, (mean)
sapply(iris3,,Virginica, mean)
sapply(iris3,,Virginica, FUN = mean)
sapply(iris, FUN = mean(101:150))
sapply(iris "FUN = mean")
sapply(iris, mean)
saaply(iris3, mean)
sapply(iris3, mean)
sapply(iris, [101:150] mean)
sapply(iris, 101:150, mean)
sapply(iris, FUN = mean [101:150])
mean(iris$Sepal.Length [101:150])
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
list(mtcars)
?mtcars
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls
ls
ls
debug(ls)
0
cachematrix
ls(cachematrix)
setwd("~/datasciencecoursera/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL}
}
makeVector()
View(makeVector)
View(makeVector)
View(makeVector)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL}
}
ls(x)
print(makeCacheMatrix())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
quit
exit
stop()
makeVector <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL}
}
x
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x=rbind(c(1,2,) c(3,4))
x = rbind(c(1,2,3)c(4,5,6))
m = makeCacheMatrix(x)
x = rbind(c(1,2,3)c(4,5,6))
rbind(c(1,2,3) c(4,5,6))
cacheSolve(m)
cacheSolve(x)
View(cacheSolve)
View(makeCacheMatrix)
View(makeVector)
x
find(x)
m
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
x
m
m = (1,2,3,4)
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get
get(m)
print(m)
x = rbind(c(2,4,6), c(1,3,5))
m = (x)
show(x)
cacheSolve(X)
cacheSolve(m)
View(cacheSolve)
function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
cacheSolve(x)
View(cacheSolve)
show(x)
cacheSolve(x)
acheSolve <- function(x, ...) {
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
cacheSolve <- function(x, c(1,3,5), c(2,4,6))
cacheSolve <- function(x,c(1,3,5), c(2,4,6))
x = c(1,3,5), c(2,4,6)
x = C1,3,5) c(2,4,6)
x = c(1,3,5) c(2,4,6))
makeCacheMatrix(x)
cacheSolve(x)
cacheSolve <- function(x, ...) {
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list (set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheSolve(x)
View(x)
cacheSolve(m)
cachesolve <<- (x)
View(cachesolve)
View(cachesolve)
View(cachesolve)
View(m)
View(acheSolve)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
cacheinverse(x)
View(cacheinverse)
View(cacheinverse)
View(cacheinverse)
View(cacheinverse)
View(cacheinverse)
View(cacheinverse)
View(acheSolve)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
cacheSolve(x)
cachesolve(x)
cachesolve <<-(x)
makeCacheMatrix <<-(c(1,2,3)c(4,5,6))
makeCacheMatrix <<- (c(1,2,3)c(4,5,6))
makeCacheMatrix <<- (c(1,2,3) c(4,5,6))
show(x)
Dir.exists(X)
is.matrix(x)
cacheMetaData(x)
View(makeCacheMatrix)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
cacheinverse <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inverse(data, ...)
x$setmean(m)
m
}
View(makeCacheMatrix)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL}
}
cacheSolve <-function(x, ...) {
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
cacheinverse <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- inverse(data, ...)
x$setmean(m)
m
}
cacheinverse(X)
View(cacheSolve)
cacheinverse(x)
x
View(acheSolve)
View(acheSolve)
View(cacheinverse)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
cachesolve(x)
m1 <<-makeCacheMatrix(x)
cachesolve <-(m1)
print(m1)
View(acheSolve)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
MakeMatrix <- function(x = matrix()) {
inv = NULL
set = function() y {
x <<- y  ##environment global
inv <<- NULL  ##environment global
}
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cachesolve <-function(x, ...) {
inv = x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data = x$get()
inv = solve(data, ...)
x$setinv(inv)
return(inv)
}
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
MakeMatrix <- function(x = matrix()) {
inv = NULL
set = function() y
x <<- y  ##environment global
inv <<- NULL  ##environment global
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cachesolve <-function(x, ...) {
inv = x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data = x$get()
inv = solve(data, ...)
x$setinv(inv)
return(inv)
}
mat1 <--(x)
show(x)
show(mat1)
source('~/datasciencecoursera/ProgrammingAssignment2/cachematrix.R')
